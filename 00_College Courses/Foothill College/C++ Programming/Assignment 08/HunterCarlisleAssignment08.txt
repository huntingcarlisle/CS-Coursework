/*
Hunter Carlisle | Foothill College Fall 2018 | Lab Eight

One instance of class DateProfile represents a user of a virtual dating service
*/

#include <string>
#include <iostream>
#include <sstream>
#include <iomanip>
using namespace std;

// CLASS PROTOTYPES ------------------------------------------------------------
class DateProfile
{
private:
    char gender;
    char searchGender;
    int romance;
    int finance;
    int distance;
    string name;

public:
    static const char DEFAULT_GENDER;
    static const char DEFAULT_SEARCH_GENDER;
    static const int DEFAULT_ROMANCE;
    static const int DEFAULT_FINANCE;
    static const int DEFAULT_DISTANCE;
    static const string DEFAULT_NAME;

public:
    DateProfile();
    DateProfile(char gender, char searchGender, int romance,
                   int finance, int distance, string name);

    // ACCESSORS
    char getGender() { return gender; }
    char getSearchGender() { return searchGender; }
    int getRomance() { return romance; }
    int getFinance() { return finance; }
    int getDistance() { return distance; }
    string getName() { return name; }

    bool setGender(char gender);
    bool setSearchGender(char searchGender);
    bool setRomance(int romance);
    bool setFinance(int finance);
    bool setDistance(int distance);
    bool setName(string name);
    void setAll(char gender, char searchGender, int romance,
                   int finance, int distance, string name);
    void setDefaults();
    double fitValue(DateProfile partner);

private:
    bool determineGenderFit(DateProfile partner);
    double determineRomanceFit(DateProfile partner);
    double determineFinanceFit(DateProfile partner);
    double determineDistanceFit(DateProfile partner);
    static bool validName(string testName);
    static bool validPreference(int testPreference);
    static bool validGender(char testGender);
};

// STATIC CONSTANTS ------------------------------------------------------------
const char GENDER_ARRAY[] = {'M', 'F'};
const int MIN_PREFERENCE = 1;
const int MAX_PREFERENCE = 10;
const int MIN_NAME_LENGTH = 1;
const int MAX_NAME_LENGTH = 100;
const double MAX_FIT = 1.0;
const double MIN_FIT = 0.0;
const double DIFF_MULT = 0.1;
const int NUM_PREFS = 3;
const char DateProfile::DEFAULT_GENDER = 'M';
const char DateProfile::DEFAULT_SEARCH_GENDER = 'F';
const int DateProfile::DEFAULT_FINANCE = 1;
const int DateProfile::DEFAULT_ROMANCE = 1;
const int DateProfile::DEFAULT_DISTANCE = 1;
const string DateProfile::DEFAULT_NAME = "Michael Scarn";


// GLOBAL METHOD PROTOTYPES ----------------------------------------------------
static void displayTwoProfiles( DateProfile profile1, DateProfile profile2 );

// MAIN DEFINITION -------------------------------------------------------------
int main()
{
    // Instantiates and tests DateProfile objects per program spec
    DateProfile applicant1;
    DateProfile applicant2('F', 'M', 10, 5, 8, "Pam Beesly"),
        applicant3('M', 'F', 10, 5, 7, "Jim Halpert"),
        applicant4('M', 'M', 2, 8, 6, "Oscar Martinez");

    displayTwoProfiles(applicant1, applicant1);
    displayTwoProfiles(applicant1, applicant2);
    displayTwoProfiles(applicant1, applicant3);
    displayTwoProfiles(applicant1, applicant4);
    cout << endl;
    displayTwoProfiles(applicant2, applicant1);
    displayTwoProfiles(applicant2, applicant2);
    displayTwoProfiles(applicant2, applicant3);
    displayTwoProfiles(applicant2, applicant4);
    cout << endl;
    displayTwoProfiles(applicant3, applicant1);
    displayTwoProfiles(applicant3, applicant2);
    displayTwoProfiles(applicant3, applicant3);
    displayTwoProfiles(applicant3, applicant4);
    cout << endl;
    displayTwoProfiles(applicant4, applicant1);
    displayTwoProfiles(applicant4, applicant2);
    displayTwoProfiles(applicant4, applicant3);
    displayTwoProfiles(applicant4, applicant4);
}

// GLOBAL SCOPE METHOD DEFINITION ----------------------------------------------
static void displayTwoProfiles( DateProfile profile1, DateProfile profile2 )
{
    // Displays the fit value of two DateProfile objects
    cout << "Fit between " + profile1.getName() + " and " + profile2.getName() +
    " :  " << fixed << setprecision(3) << profile1.fitValue(profile2) << endl;
}

// DATEPROFILE CLASS METHODS ---------------------------------------------------
//CONSTRUCTORS
DateProfile::DateProfile()
{
    setGender(DEFAULT_GENDER);
    setSearchGender(DEFAULT_SEARCH_GENDER);
    setRomance(DEFAULT_ROMANCE);
    setFinance(DEFAULT_FINANCE);
    setDistance(DEFAULT_DISTANCE);
    setName(DEFAULT_NAME);
}

DateProfile::DateProfile(char gender, char searchGender, int romance,
                            int finance, int distance, string name)
{
    if (!setGender(gender))
        this->gender = DEFAULT_GENDER;
    if (!setSearchGender(searchGender))
        this->searchGender = DEFAULT_SEARCH_GENDER;
    if (!setRomance(romance))
        this->romance = DEFAULT_ROMANCE;
    if (!setFinance(finance))
        this->finance = DEFAULT_FINANCE;
    if (!setDistance(distance))
        this->distance = DEFAULT_DISTANCE;
    if (!setName(name))
        this->name = DEFAULT_NAME;
}

// HELPERS
bool DateProfile::validName(string testName)
{
    //Returns true if input name is valid
    return (testName.length() >= MIN_NAME_LENGTH &&
            testName.length() <= MAX_NAME_LENGTH &&
            isalpha(testName[0]));
}

bool DateProfile::validGender(char testGender)
{
    //Returns true if input gender is valid
    return (std::find(std::begin(GENDER_ARRAY), std::end(GENDER_ARRAY),
            testGender) != std::end(GENDER_ARRAY));
}

bool DateProfile::validPreference(int testPreference)
{
    //Returns true if input preference is valid
    return (testPreference >= MIN_PREFERENCE &&
            testPreference <= MAX_PREFERENCE);
}

double DateProfile::fitValue(DateProfile partner)
{
    // Returns numeric representation of total fit between self
    // and input DateProfile object
    double fit;
    if (this->determineGenderFit(partner))
    {
        double fitArray[] = {this->determineRomanceFit(partner),
                             this->determineFinanceFit(partner),
                             this->determineDistanceFit(partner)};
        fit = (fitArray[0] + fitArray[1] + fitArray[2]) / NUM_PREFS;
    }
    else
    {
        fit = MIN_FIT;
    }
    return fit;
}

bool DateProfile::determineGenderFit(DateProfile partner)
{
    // Returns true if gender fits
    return (this->getGender() == partner.getSearchGender() &&
            this->getSearchGender() == partner.getGender());
}

double DateProfile::determineRomanceFit(DateProfile partner)
{
    // Returns numeric representation of romance fit
    double diff = abs(this->getRomance() - partner.getRomance()) * DIFF_MULT;
    return MAX_FIT - diff;
}

double DateProfile::determineFinanceFit(DateProfile partner)
{
    // Returns numeric representation of finance fit
    double diff = abs(this->getFinance() - partner.getFinance()) * DIFF_MULT;
    return MAX_FIT - diff;
}

double DateProfile::determineDistanceFit(DateProfile partner)
{
    // Returns numeric representation of distance fit
    double diff = abs(this->getDistance() - partner.getDistance()) * DIFF_MULT;
    return MAX_FIT - diff;
}

// MUTATORS
bool DateProfile::setGender(char gender)
{
    // Returns true if able to set gender to input value
    if (!validGender(gender))
        return false;
    this->gender = gender;
    return true;
}

bool DateProfile::setSearchGender(char searchGender)
{
    // Returns true if able to set search gender to input value
    if (!validGender(searchGender))
        return false;
    this->searchGender = searchGender;
    return true;
}

bool DateProfile::setRomance(int romance)
{
    // Returns true if able to set romance  to input value
    if (!validPreference(romance))
        return false;
    this->romance = romance;
    return true;
}

bool DateProfile::setFinance(int finance)
{
    // Returns true if able to set finance to input value
    if (!validPreference(finance))
        return false;
    this->finance = finance;
    return true;
}

bool DateProfile::setDistance(int distance)
{
    // Returns true if able to set distance to input value
    if (!validPreference(distance))
        return false;
    this->distance = distance;
    return true;
}

bool DateProfile::setName(string name)
{
    // Returns true if able to set name to input value
    if (!validName(name))
        return false;
    this->name = name;
    return true;
}

void DateProfile::setAll(char gender, char searchGender, int romance,
                            int finance, int distance, string name)
{
    // Sets all object members to inputted values
    setGender(gender);
    setSearchGender(searchGender);
    setRomance(romance);
    setFinance(finance);
    setDistance(distance);
    setName(name);
}

void DateProfile::setDefaults()
{
    // Sets all object members to default values
    setGender(DEFAULT_GENDER);
    setSearchGender(DEFAULT_SEARCH_GENDER);
    setRomance(DEFAULT_ROMANCE);
    setFinance(DEFAULT_FINANCE);
    setDistance(DEFAULT_DISTANCE);
    setName(DEFAULT_NAME);
}


/* PROGRAM RUN -----------------------------------------------------------------
Fit between Michael Scarn and Michael Scarn :  0.000
Fit between Michael Scarn and Pam Beesly :  0.333
Fit between Michael Scarn and Jim Halpert :  0.000
Fit between Michael Scarn and Oscar Martinez :  0.000

Fit between Pam Beesly and Michael Scarn :  0.333
Fit between Pam Beesly and Pam Beesly :  0.000
Fit between Pam Beesly and Jim Halpert :  0.967
Fit between Pam Beesly and Oscar Martinez :  0.000

Fit between Jim Halpert and Michael Scarn :  0.000
Fit between Jim Halpert and Pam Beesly :  0.967
Fit between Jim Halpert and Jim Halpert :  0.000
Fit between Jim Halpert and Oscar Martinez :  0.000

Fit between Oscar Martinez and Michael Scarn :  0.000
Fit between Oscar Martinez and Pam Beesly :  0.000
Fit between Oscar Martinez and Jim Halpert :  0.000
Fit between Oscar Martinez and Oscar Martinez :  1.000

Process finished with exit code 0
----------------------------------------------------------------------------- */